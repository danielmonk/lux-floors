{"version":3,"sources":["../../../src/utils/webpack/corejs-resolver.ts"],"names":["coreJs2FileRegex","replaceMap","CoreJSResolver","constructor","_coreJSNodeModulesPath","path","dirname","require","resolve","request","resolveContext","callback","innerRequest","startsWith","coreJsRequest","resolveMessage","test","forEach","search","replace","_resolver","doResolve","_target","err","result","undefined","apply","resolver","ensureHook","getHook","tapAsync","bind"],"mappings":";;;;;;;AACA;;AAEA;AACA,MAAMA,gBAAgB,GAAG,4CAAzB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CACjB,CAAE,OAAF,EAAW,MAAX,CADiB,EAEjB,CAAE,OAAF,EAAW,MAAX,CAFiB,EAGjB,CAAE,OAAF,EAAW,MAAX,CAHiB,EAIjB,CAAE,OAAF,EAAW,MAAX,CAJiB,EAKjB,CAAE,OAAF,EAAW,MAAX,CALiB,EAMjB,CAAE,kBAAF,EAAsB,iCAAtB,CANiB,EAOjB,CAAE,iBAAF,EAAqB,WAArB,CAPiB,EAQjB,CAAE,cAAF,EAAkB,cAAlB,CARiB,EASjB,CAAE,gBAAF,EAAoB,gBAApB,CATiB,EAUjB,CAAE,eAAF,EAAmB,eAAnB,CAViB,EAWjB,CAAE,cAAF,EAAkB,cAAlB,CAXiB,CAAnB;;AAmBA;;;;;;AAMO,MAAMC,cAAN,CAAqB;AAK1BC,EAAAA,WAAW,GAAG;AACZ;AACA;AACA,SAAKC,sBAAL,GAA8BC,IAAI,CAACC,OAAL,CAC5BD,IAAI,CAACC,OAAL,CAAaC,OAAO,CAACC,OAAR,CAAiB,SAAjB,CAAb,CAD4B,CAA9B;AAGD;;AAEDA,EAAAA,OAAO,CACLC,OADK,EAELC,cAFK,EAGLC,QAHK,EAIC;AACN,UAAMC,YAAY,GAAGH,OAAO,CAACA,OAAR,IAAmBA,OAAO,CAACJ,IAAhD,CADM,CAGN;;AACA,QAAI,CAACO,YAAD,IAAiB,CAACA,YAAY,CAACC,UAAb,CAAyB,UAAzB,CAAtB,EAA2D;AACzD,aAAO,KAAKF,QAAQ,EAApB;AACD;;AAED,QAAIG,aAAa,GAAGF,YAApB;AACA,QAAIG,cAAc,GAAI,6CAAtB,CATM,CAWN;;AACA,QAAIf,gBAAgB,CAACgB,IAAjB,CAAsBF,aAAtB,CAAJ,EAA0C;AACxCb,MAAAA,UAAU,CAACgB,OAAX,CAAmB,CAAC,CAACC,MAAD,EAASC,OAAT,CAAD,KAAuB;AACxCL,QAAAA,aAAa,GAAGA,aAAa,CAACK,OAAd,CAAsBD,MAAtB,EAA8BC,OAA9B,CAAhB;AACD,OAFD;AAIAJ,MAAAA,cAAc,GAAI,iBAAgBH,YAAa,iBAAgBE,aAAc,GAA7E;AACD;;AAED,WAAO,KAAK,KAAKM,SAAL,CAAeC,SAAf,CACV,KAAKC,OADK,EAEV,EACE,GAAGb,OADL;AAEEA,MAAAA,OAAO,EAAEJ,IAAI,CAACG,OAAL,CAAa,KAAKJ,sBAAlB,EAA0CU,aAA1C;AAFX,KAFU,EAMVC,cANU,EAOVL,cAPU,EAQV,CAACa,GAAD,EAAMC,MAAN,KAAiB;AACf,UAAID,GAAJ,EAAS;AACP,eAAOZ,QAAQ,CAACY,GAAD,CAAf;AACD,OAHc,CAKf;AACA;AACA;;;AACA,UAAIC,MAAM,KAAKC,SAAf,EAA0B;AACxB,eAAOd,QAAQ,EAAf;AACD;;AAED,aAAOA,QAAQ,CAAC,IAAD,EAAOa,MAAP,CAAf;AACD,KArBS,CAAZ;AAuBD;;AAEDE,EAAAA,KAAK,CAACC,QAAD,EAA2B;AAC9B,SAAKL,OAAL,GAAeK,QAAQ,CAACC,UAAT,CAAqB,SAArB,CAAf;AACA,SAAKR,SAAL,GAAiBO,QAAjB;AAEAA,IAAAA,QAAQ,CACLE,OADH,CACY,mBADZ,EAEGC,QAFH,CAEa,gBAFb,EAE8B,KAAKtB,OAAL,CAAauB,IAAb,CAAkB,IAAlB,CAF9B;AAGD;;AArEyB","sourcesContent":["import Resolver from \"enhanced-resolve/lib/Resolver\"\nimport * as path from \"path\"\n\n// Core-js uses es6, es7 & web prefixes, which we'll convert to core-js 3\nconst coreJs2FileRegex = /\\/modules\\/(es6|es7|web)\\.|\\/es6\\/|\\/es7\\//\n\n// Try to replace core-js2 files to core-js@3 to reduce file size\nconst replaceMap = [\n  [`/es6.`, `/es.`],\n  [`/es7.`, `/es.`],\n  [`/es6/`, `/es/`],\n  [`/es7/`, `/es/`],\n  [`/es7/`, `/es/`],\n  [`web.dom.iterable`, `web.dom-collections.iterator.js`],\n  [`typed.data-view`, `data-view`],\n  [`regexp.match`, `string.match`],\n  [`regexp.replace`, `string.replace`],\n  [`regexp.search`, `string.search`],\n  [`regexp.split`, `string.split`],\n]\n\ninterface IRequest {\n  request?: string\n  path: string\n}\n\n/**\n * Babel-preset is set to corejs@3 which will add automatic polyfills. If a project has core-js@2 installed in their root or a package got compiled with core-js@2\n * we need to convert it to corejs@3 because core-js@2 isn't available or we might add multiple polyfills for the same problem.\n *\n * The resolver converts core-js@2 imports to core-js@3 imports to make our bundle as small as possible.\n */\nexport class CoreJSResolver {\n  _coreJSNodeModulesPath: string\n  _resolver?: Resolver\n  _target?: string\n\n  constructor() {\n    // Get the nodemodules directory where core-js of gatsby lives\n    // it might be inside gatsby/node_modules when multiple core-js versions are loaded\n    this._coreJSNodeModulesPath = path.dirname(\n      path.dirname(require.resolve(`core-js`))\n    )\n  }\n\n  resolve(\n    request: IRequest,\n    resolveContext: unknown,\n    callback: (err?: Error | null, result?: unknown) => void\n  ): void {\n    const innerRequest = request.request || request.path\n\n    // we only care about core-js\n    if (!innerRequest || !innerRequest.startsWith(`core-js/`)) {\n      return void callback()\n    }\n\n    let coreJsRequest = innerRequest\n    let resolveMessage = `alias core-js@3 to gatsby's core-js package`\n\n    // preset-env adds packages from modules/ so we rewrite them to our gatsby package\n    if (coreJs2FileRegex.test(coreJsRequest)) {\n      replaceMap.forEach(([search, replace]) => {\n        coreJsRequest = coreJsRequest.replace(search, replace)\n      })\n\n      resolveMessage = `map core-js@2(${innerRequest}) to corejs@3(${coreJsRequest})`\n    }\n\n    return void this._resolver.doResolve(\n      this._target,\n      {\n        ...request,\n        request: path.resolve(this._coreJSNodeModulesPath, coreJsRequest),\n      },\n      resolveMessage,\n      resolveContext,\n      (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n\n        // if a rename fails we try to load the original file\n        // this could error when our mapping isn't complete. I've tested this on a couple of sites\n        // and couldn't find anything but you never know.\n        if (result === undefined) {\n          return callback()\n        }\n\n        return callback(null, result)\n      }\n    )\n  }\n\n  apply(resolver: Resolver): void {\n    this._target = resolver.ensureHook(`resolve`)\n    this._resolver = resolver\n\n    resolver\n      .getHook(`described-resolve`)\n      .tapAsync(`CoreJSResolver`, this.resolve.bind(this))\n  }\n}\n"],"file":"corejs-resolver.js"}